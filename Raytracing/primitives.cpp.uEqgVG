#include <cmath>
#include "primitives.h"


void Primitives::set_matrices(const Mat4& view, const Mat4& projection)
{
	viewMatrix = view;
	projectionMatrix = projection;
}

void Primitives::add_cylinder(int sides, float radius, std::vector<int>& indices)
{
	int beg = m_points.size();
	float a = M_PI/4.0f;
	float b = 2.0f*M_PI/sides;
	for (int i=0;i<sides;++i)
	{
		m_points.push_back(Vec3(radius*cos(a),radius*sin(a),-1.0f));
		m_points.push_back(Vec3(radius*cos(a),radius*sin(a),1.0f));
		a+=b;
	}

	int cb = m_points.size();
	m_points.push_back(Vec3(0.0,0.0,-1.0f));
	int ch = m_points.size();
	m_points.push_back(Vec3(0.0,0.0, 1.0f));

	int sides2 = 2*sides;

	for (int i=0;i<sides;++i)
	{
		indices.push_back(beg+2*i);
		indices.push_back(beg+(2*i+2)%sides2);
		indices.push_back(beg+(2*i+1)%sides2);
		indices.push_back(beg+(2*i+3)%sides2);
		indices.push_back(beg+(2*i+1)%sides2);
		indices.push_back(beg+(2*i+2)%sides2);

		indices.push_back(beg+(2*i+2)%sides2);
		indices.push_back(beg+2*i);
		indices.push_back(cb);

		indices.push_back(beg+(2*i+1)%sides2);
		indices.push_back(beg+(2*i+3)%sides2);
		indices.push_back(ch);
	}
}



void Primitives::add_cone(int sides, float radius, std::vector<int>& indices)
{
	int beg = m_points.size();
	float a = 0.0f;
	float b = 2.0f*M_PI/sides;
	for (int i=0;i<sides;++i)
	{
		m_points.push_back(Vec3(radius*cos(a),radius*sin(a),-0.5));
		a+=b;
	}

	int cb = m_points.size();
	m_points.push_back(Vec3(0.0,0.0,-0.5));
	int ch = m_points.size();
	m_points.push_back(Vec3(0.0,0.0, 0.5));

	for (int i=0;i<sides;++i)
	{
		indices.push_back(beg+i);
		indices.push_back(beg+(i+1)%sides);
		indices.push_back(ch);

		indices.push_back(beg+(i+1)%sides);
		indices.push_back(beg+i);
		indices.push_back(cb);
	}
}

bool Primitives::inTriangle(const Vec3 &p, const Vec3 &vertex1, const Vec3 &vertex2, const Vec3 &vertex3)
{
    // Move the triangle so that the point becomes the
    // triangles origin
    Vec3 a = vertex1 - p;
    Vec3 b = vertex2 - p;
    Vec3 c = vertex3 - p;

    // Compute the normal vectors for triangles:
    // u = normal of PBC
    // v = normal of PCA
    // w = normal of PAB

    Vec3 u = glm::cross(b, c);
    Vec3 v = glm::cross(c, a);
    Vec3 w = glm::cross(a, b);

    // Test to see if the normals are facing
    // the same direction, return false if not
    if (glm::dot(u, v) < 0.0f) {
        return false;
    }
    if (glm::dot(u, w) < 0.0f) {
        return false;
    }

//    FILE* f = fopen("log.txt", "a");
//    fprintf(f, "a (%f,%f,%f) ", a.x, a.y, a.z);
//    fprintf(f, "b (%f,%f,%f) ", b.x, b.y, b.z);
//    fprintf(f, "c (%f,%f,%f) ", c.x, c.y, c.z);
//    fprintf(f, "P (%f,%f,%f) ", p.x, p.y, p.z);
//    fprintf(f, "u.v: %f, u.w: %f, v.w: %f \n", glm::dot(u, v), glm::dot(u, w), glm::dot(v, w));
//    fclose(f);

    // All normals facing the same way, return true
    return true;
}

Vec3 Primitives::normal_cube(const Vec3& p)
{
    for(int i=0; i<m_indices_cube.size(); i=i+3)
    {
        if (inTriangle(p, m_points[m_indices_cube[i]], m_points[m_indices_cube[i+1]], m_points[m_indices_cube[i+2]]))
        {
            Vec3 V = glm::normalize(m_points[m_indices_cube[i+1]] - m_points[m_indices_cube[i]]);
            Vec3 W = glm::normalize(m_points[m_indices_cube[i+2]] - m_points[m_indices_cube[i]]);

            Vec3 N = glm::normalize(glm::cross(V,W));

//            FILE* f = fopen("log.txt", "a");
//            fprintf(f, "V (%f,%f,%f) ", V.x, V.y, V.z);
//            fprintf(f, "W (%f,%f,%f) ", W.x, W.y, W.z);
//            fprintf(f, "N (%f,%f,%f) \n", N.x, N.y, N.z);
//            fclose(f);

            return N;
        }
    }

    return Vec3(0.0f, 0.0f, 0.0f);
}

Vec3 Primitives::normal_sphere(const Vec3& p)
{
    for(int i=0; i<m_indices_sphere.size(); i=i+3)
    {
        if (inTriangle(p, m_points[m_indices_sphere[i]], m_points[m_indices_sphere[i+1]], m_points[m_indices_sphere[i+2]]))
        {
            Vec3 V = glm::normalize(m_points[m_indices_sphere[i+1]] - m_points[m_indices_sphere[i]]);
            Vec3 W = glm::normalize(m_points[m_indices_sphere[i+2]] - m_points[m_indices_sphere[i]]);

            Vec3 N = glm::normalize(glm::cross(V,W));

//            FILE* f = fopen("log.txt", "a");
//            fprintf(f, "V (%f,%f,%f) ", V.x, V.y, V.z);
//            fprintf(f, "W (%f,%f,%f) ", W.x, W.y, W.z);
//            fprintf(f, "N (%f,%f,%f) \n", N.x, N.y, N.z);
//            fclose(f);

            return N;
        }
    }

    return Vec3(0.0f, 0.0f, 0.0f);
}

Vec3 Primitives::normal_cylinder(const Vec3& p)
{
    for(int i=0; i<m_indices_cylinder.size(); i=i+3)
    {
        if (inTriangle(p, m_points[m_indices_cylinder[i]], m_points[m_indices_cylinder[i+1]], m_points[m_indices_cylinder[i+2]]))
        {
            Vec3 V = glm::normalize(m_points[m_indices_cylinder[i+1]] - m_points[m_indices_cylinder[i]]);
            Vec3 W = glm::normalize(m_points[m_indices_cylinder[i+2]] - m_points[m_indices_cylinder[i]]);

            Vec3 N = glm::normalize(glm::cross(V,W));

//            FILE* f = fopen("log.txt", "a");
//            fprintf(f, "V (%f,%f,%f) ", V.x, V.y, V.z);
//            fprintf(f, "W (%f,%f,%f) ", W.x, W.y, W.z);
//            fprintf(f, "N (%f,%f,%f) \n", N.x, N.y, N.z);
//            fclose(f);

            return N;
        }
    }

    return Vec3(0.0f, 0.0f, 0.0f);
}

Vec3 Primitives::normal_cone(const Vec3& p)
{
    for(int i=0; i<m_indices_cone.size(); i=i+3)
    {
        if (inTriangle(p, m_points[m_indices_cone[i]], m_points[m_indices_cone[i+1]], m_points[m_indices_cone[i+2]]))
        {
            Vec3 V = glm::normalize(m_points[m_indices_cone[i+1]] - m_points[m_indices_cone[i]]);
            Vec3 W = glm::normalize(m_points[m_indices_cone[i+2]] - m_points[m_indices_cone[i]]);

            Vec3 N = glm::normalize(glm::cross(V,W));

//            FILE* f = fopen("log.txt", "a");
//            fprintf(f, "V (%f,%f,%f) ", V.x, V.y, V.z);
//            fprintf(f, "W (%f,%f,%f) ", W.x, W.y, W.z);
//            fprintf(f, "N (%f,%f,%f) \n", N.x, N.y, N.z);
//            fclose(f);

            return N;
        }
    }

    return Vec3(0.0f, 0.0f, 0.0f);
}

Vec4 Primitives::intersect_cube(const Vec3& Origin, const Vec3& Dir)
{
    ray r = ray(Origin, Dir);
    Vec4 dist;

    dist.w = std::numeric_limits<float>::max();
    int R = -1;

    if (intersectionBB(Vec3(-1.0f, -1.0f, -1.0f), Vec3(1.0f, 1.0f, 1.0f), r))
    {
        for(int i=0; i<m_indices_cube.size(); i=i+3)
        {
            Vec4 res = intersectTriangle(r, m_points[m_indices_cube[i]], m_points[m_indices_cube[i+1]], m_points[m_indices_cube[i+2]]);
            if (res.w>-0.9)
            {
                if(res.w<dist.w)
                {
                    dist = res;
                    R = 1;
                }
            }
        }
    }

    if(R<0)
    {
        dist.w = -1;
    }

    return dist;
}

Vec4 Primitives::intersect_sphere(const Vec3 &Origin, const Vec3 &Dir)
{
    ray r = ray(Origin, Dir);
    Vec4 dist;

    dist.w = std::numeric_limits<float>::max();
    int R = -1;

    if (intersectionBB(Vec3(-1.0f, -1.0f, -1.0f), Vec3(1.0f, 1.0f, 1.0f), r))
    {
        for(int i=0; i<m_indices_sphere.size(); i=i+3)
        {
            Vec4 res = intersectTriangle(r, m_points[m_indices_sphere[i]], m_points[m_indices_sphere[i+1]], m_points[m_indices_sphere[i+2]]);
            if (res.w>-0.9)
            {
                if(res.w<dist.w)
                {
                    dist = res;
                    R = 1;
                }
            }
        }
    }


    if(R<0)
    {
        dist.w = -1;
    }

    return dist;
}

Vec4 Primitives::intersect_cylinder(const Vec3 &Origin, const Vec3 &Dir)
{
    ray r = ray(Origin, Dir);
    Vec4 dist;

    dist.w = std::numeric_limits<float>::max();
    int R = -1;

    if (intersectionBB(Vec3(-1.0f, -1.0f, -1.0f), Vec3(1.0f, 1.0f, 1.0f), r))
    {
        for(int i=0; i<m_indices_cylinder.size(); i=i+3)
        {
            Vec4 res = intersectTriangle(r, m_points[m_indices_cylinder[i]], m_points[m_indices_cylinder[i+1]], m_points[m_indices_cylinder[i+2]]);
            if (res.w>-0.9)
            {
                if(res.w<dist.w)
                {
                    dist = res;
                    R = 1;
                }
            }
        }
    }

    if(R<0)
    {
        dist.w = -1;
    }

    return dist;
}

Vec4 Primitives::intersect_cone(const Vec3 &Origin, const Vec3 &Dir)
{
    ray r = ray(Origin, Dir);
    Vec4 dist;

    dist.w = std::numeric_limits<float>::max();
    int R = -1;

    for(int i=0; i<m_indices_cone.size(); i=i+3)
    {
        Vec4 res = intersectTriangle(r, m_points[m_indices_cone[i]], m_points[m_indices_cone[i+1]], m_points[m_indices_cone[i+2]]);
        if (res.w>-0.9)
        {
            if(res.w<dist.w)
            {
                dist = res;
                R = 1;
            }
        }
    }

    if(R<0)
    {
        dist.w = -1;
    }

    return dist;
}

float Primitives::max(float a, float b)
{
    if (a>b)
    {
        return a;
    }

    return b;
}

float Primitives::min(float a, float b)
{
    if (a<=b)
    {
        return a;
    }

    return b;
}

bool Primitives::intersectionBB(const Vec3 &minV, const Vec3 &maxV, ray r) {

    double tx1 = (minV.x - r.x0.x)*r.n_inv.x;
    double tx2 = (maxV.x - r.x0.x)*r.n_inv.x;

    double tmin = min(tx1, tx2);
    double tmax = max(tx1, tx2);

    double ty1 = (minV.y - r.x0.y)*r.n_inv.y;
    double ty2 = (maxV.y - r.x0.y)*r.n_inv.y;

    tmin = max(tmin, min(ty1, ty2));
    tmax = min(tmax, max(ty1, ty2));

    return tmax >= tmin;
}

void Primitives::add_sphere(int sides, float radius, std::vector<int>& indices)
{
	int beg = m_points.size();

	int nbPara = sides;
	int nbMeri = sides;

	float a1 = (180.0/(nbPara+1))*M_PI/180.0;
	float a2 = (360.0/nbMeri)*M_PI/180.0;

	// les paralleles
	for (int i= 0; i< nbPara; ++i)
	{
		float angle = -M_PI/2.0 + a1*(i+1);
		float z = radius*sin(angle);
		float rad = radius*cos(angle);

		for  (int j=0; j< nbMeri; ++j)
		{
			m_points.push_back(Vec3(rad*cos(a2*j), rad*sin(a2*j),z));
		}
	}
	// les poles
	m_points.push_back(Vec3(0.0,0.0,-radius));
	m_points.push_back(Vec3(0.0,0.0, radius));

	// triangles
	for (int i= 0; i< (nbPara-1); ++i)
	{
		for  (int j=0; j< nbMeri; ++j)
		{
			indices.push_back(beg+nbMeri*i+j);
			indices.push_back(beg+nbMeri*i+(j+1)%nbMeri);
			indices.push_back(beg+nbMeri*(i+1)+(j+1)%nbMeri);
			indices.push_back(beg+nbMeri*((i+1))+(j+1)%nbMeri);
			indices.push_back(beg+nbMeri*((i+1))+j);
			indices.push_back(beg+nbMeri*i+j);
		}
	}
	// poles
	for  (int j=0; j< nbMeri; ++j)
	{
		indices.push_back(beg+nbMeri*nbPara);
		indices.push_back(beg+(j+1)%nbMeri);
		indices.push_back(beg+j);
	}
	for  (int j=0; j< nbMeri; ++j)
	{
		indices.push_back(beg+nbMeri*nbPara+1);
		indices.push_back(beg+nbMeri*(nbPara-1)+j);
		indices.push_back(beg+nbMeri*(nbPara-1)+(j+1)%nbMeri);
	}
}

/// Checks whether a ray intersects a triangle. This uses the algorithm
/// developed by Tomas Moller and Ben Trumbore, which was published in the
/// Journal of Graphics Tools, volume 2, "Fast, Minimum Storage Ray-Triangle
/// Intersection".
Vec4 Primitives::intersectTriangle(ray r, const Vec3 &vertex1, const Vec3 &vertex2, const Vec3 &vertex3)
{
    // Compute vectors along two edges of the triangle.
    Vec3 edge1 = vertex2-vertex1;
    Vec3 edge2 = vertex3-vertex1;

    // Compute the determinant.
    Vec3 directionCrossEdge2 = glm::cross(r.dir, edge2);
    float determinant = glm::dot(edge1, directionCrossEdge2);

    // If the ray is parallel to the triangle plane, there is no collision.
    if (determinant > -0.0000001 && determinant < 0.0000001)
    {
        return Vec4(0.0f, 0.0f, 0.0f, -1.0f);
    }

    float inverseDeterminant = 1.0f / determinant;

    // Calculate the U parameter of the intersection point.
    Vec3 distanceVector = r.x0 - vertex1;

    float triangleU = glm::dot(distanceVector, directionCrossEdge2);
    triangleU *= inverseDeterminant;

    // Make sure it is inside the triangle.
    if (triangleU < 0 || triangleU > 1)
    {
        return Vec4(0.0f, 0.0f, 0.0f, -1.0f);
    }

    // Calculate the V parameter of the intersection point.
    Vec3 distanceCrossEdge1 = glm::cross(distanceVector, edge1);

    float triangleV = glm::dot(r.dir, distanceCrossEdge1);
    triangleV *= inverseDeterminant;

    // Make sure it is inside the triangle.
    if (triangleV < 0 || triangleU + triangleV > 1)
    {
        return Vec4(0.0f, 0.0f, 0.0f, -1.0f);
    }

    // Compute the distance along the ray to the triangle.
    float rayDistance;
    rayDistance = glm::dot(edge2, distanceCrossEdge1);
    rayDistance *= inverseDeterminant;

    // Is the triangle behind the ray origin?
    if (rayDistance < -1.0)
    {
        return Vec4(0.0f, 0.0f, 0.0f, -1.0f);
    }

    Vec3 Point = (1-triangleU-triangleV)*vertex1 + triangleU*vertex2 + triangleV*vertex3;

//    if(abs(glm::distance(Point, r.x0)-rayDistance) > 0.01 )
//    {
//        FILE* f = fopen("log.txt", "a");
//        fprintf(f, "Calculation Error at ");
//        fprintf(f, "(%f,%f,%f)", Point.x, Point.y, Point.z);
//        fprintf(f, " at distance %f/%f \n", rayDistance, glm::distance(Point, r.x0));
//        fprintf(f, "For ray position ");
//        fprintf(f, "(%f,%f,%f)", r.x0.x, r.x0.y, r.x0.z);
//        fprintf(f, " and direction ");
//        fprintf(f, "(%f,%f,%f)\n", r.dir.x, r.dir.y, r.dir.z);
//        fprintf(f, "Triangle p1:");
//        fprintf(f, "(%f,%f,%f)", vertex1.x, vertex1.y, vertex1.z);
//        fprintf(f, " p2:");
//        fprintf(f, "(%f,%f,%f)", vertex2.x, vertex2.y, vertex2.z);
//        fprintf(f, " p3:");
//        fprintf(f, "(%f,%f,%f)\n", vertex3.x, vertex3.y, vertex3.z);
//        fclose(f);
//    }

    return Vec4(Point.x, Point.y, Point.z, rayDistance);
}

ray::ray(const Vec3 &Origin, const Vec3 &Dir)
{
    this->x0 = Origin;
    this->n_inv.x = 1.0f/Dir.x;
    this->n_inv.y = 1.0f/Dir.y;
    this->n_inv.z = 1.0f/Dir.z;
    this->dir = glm::normalize(Dir);
}

void Primitives::gl_init()
{
	m_shader_flat = new ShaderProgramFlat();

	//VBO
	glGenBuffers(1, &m_vbo);
	glBindBuffer(GL_ARRAY_BUFFER, m_vbo);
	const std::vector<Vec3>& points = getPoints();
	glBufferData(GL_ARRAY_BUFFER, 3 * points.size() * sizeof(GLfloat), &(points.front()[0]), GL_STATIC_DRAW);
	glBindBuffer(GL_ARRAY_BUFFER, 0);

	//VAO
	glGenVertexArrays(1, &m_vao);
	glBindVertexArray(m_vao);
	glBindBuffer(GL_ARRAY_BUFFER, m_vbo);
	glEnableVertexAttribArray(m_shader_flat->idOfVertexAttribute);
	glVertexAttribPointer(m_shader_flat->idOfVertexAttribute, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glBindVertexArray(0);

	//EBO indices
	glGenBuffers(1, &m_ebo_cube);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, m_ebo_cube);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER,m_indices_cube.size() * sizeof(int), &(m_indices_cube.front()), GL_STATIC_DRAW);

	glGenBuffers(1, &m_ebo_cone);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, m_ebo_cone);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER,m_indices_cone.size() * sizeof(int), &(m_indices_cone.front()), GL_STATIC_DRAW);

	glGenBuffers(1, &m_ebo_cylinder);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, m_ebo_cylinder);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER,m_indices_cylinder.size() * sizeof(int), &(m_indices_cylinder.front()), GL_STATIC_DRAW);

	glGenBuffers(1, &m_ebo_sphere);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, m_ebo_sphere);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER,m_indices_sphere.size() * sizeof(int), &(m_indices_sphere.front()), GL_STATIC_DRAW);

	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);

}

void Primitives::draw_cube(const Mat4& transfo, const Vec3& color) const
{
	m_shader_flat->startUseProgram();

	m_shader_flat->sendViewMatrix(viewMatrix*transfo);
	m_shader_flat->sendProjectionMatrix(projectionMatrix);

	glUniform3fv(m_shader_flat->idOfColorUniform, 1, glm::value_ptr(color));
	glUniform3fv(m_shader_flat->idOfBColorUniform, 1, glm::value_ptr(color));

	glBindVertexArray(m_vao);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,m_ebo_cube);
	glDrawElements(GL_TRIANGLES, m_indices_cube.size(),GL_UNSIGNED_INT,0);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,0);
	glBindVertexArray(0);

	m_shader_flat->stopUseProgram();
}

void Primitives::draw_cylinder(const Mat4& transfo, const Vec3& color) const
{
	m_shader_flat->startUseProgram();

	m_shader_flat->sendViewMatrix(viewMatrix*transfo);
	m_shader_flat->sendProjectionMatrix(projectionMatrix);

	glUniform3fv(m_shader_flat->idOfColorUniform, 1, glm::value_ptr(color));
	glUniform3fv(m_shader_flat->idOfBColorUniform, 1, glm::value_ptr(color));

	glBindVertexArray(m_vao);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,m_ebo_cylinder);
	glDrawElements(GL_TRIANGLES, m_indices_cylinder.size(),GL_UNSIGNED_INT,0);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,0);
	glBindVertexArray(0);

	m_shader_flat->stopUseProgram();
}

void Primitives::draw_cone(const Mat4& transfo, const Vec3& color) const
{
	m_shader_flat->startUseProgram();

	m_shader_flat->sendViewMatrix(viewMatrix*transfo);
	m_shader_flat->sendProjectionMatrix(projectionMatrix);

	glUniform3fv(m_shader_flat->idOfColorUniform, 1, glm::value_ptr(color));
	glUniform3fv(m_shader_flat->idOfBColorUniform, 1, glm::value_ptr(color));

	glBindVertexArray(m_vao);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,m_ebo_cone);
	glDrawElements(GL_TRIANGLES, m_indices_cone.size(),GL_UNSIGNED_INT,0);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,0);
	glBindVertexArray(0);

	m_shader_flat->stopUseProgram();
}

void Primitives::draw_sphere(const Mat4& transfo, const Vec3& color) const
{
	m_shader_flat->startUseProgram();

	m_shader_flat->sendViewMatrix(viewMatrix*transfo);
	m_shader_flat->sendProjectionMatrix(projectionMatrix);

	glUniform3fv(m_shader_flat->idOfColorUniform, 1, glm::value_ptr(color));
	glUniform3fv(m_shader_flat->idOfBColorUniform, 1, glm::value_ptr(color));

	glBindVertexArray(m_vao);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,m_ebo_sphere);
	glDrawElements(GL_TRIANGLES, m_indices_sphere.size(),GL_UNSIGNED_INT,0);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,0);
	glBindVertexArray(0);

	m_shader_flat->stopUseProgram();
}


Primitives::Primitives()
{
	add_cylinder(32, 1.0f, m_indices_cylinder);
	add_cone(32,1.0f,m_indices_cone);
	add_cylinder(4,1.414,m_indices_cube);
	add_sphere(32,1.0f,m_indices_sphere);
}
